###############################################################################
#   Bed Fan (Nevermore or The Filter) Configuration
###############################################################################

## Bed Fan Variables
[gcode_macro _BED_FAN_VARS]
variable_threshold: 90	                                 # Enable bed fans above this threshold
variable_fast: 0.75		                                 # Fan speed once bed temp is reached  
variable_slow: 0.25		                                 # Fan speed while bed is heating
variable_fan: 'fan_generic bed_fan_filter'               # The fan to track
variable_hours_until_replacement: 100                    # Total run hours before media replacing
variable_replacement_gcode: 'M117 replace filter media'  # Replace media gcode (will be repeated every second until reset)
gcode:

## Bed Fan Speed Aliases
[gcode_macro BED_FANS_SLOW]
description: Set bed fan speed to 'slow'
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _BED_FAN_VARS"].slow|float %}
	
	SET_FAN_SPEED FAN=bed_fan_filter SPEED={SLOW}

[gcode_macro BED_FANS_FAST]
description: Set bed fan speed to 'fast'
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _BED_FAN_VARS"].fast|float %}
	
	SET_FAN_SPEED FAN=bed_fan_filter SPEED={FAST}

[gcode_macro BED_FANS_OFF]
description: Turn off the bed fans
gcode:
	SET_FAN_SPEED FAN=bed_fan_filter SPEED=0

## Override, set fan speeds to low and start monitoring loop
[gcode_macro SET_HEATER_TEMPERATURE]
description: Override and set fan speeds to low and start monitoring loop
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BED_FAN_VARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BED_FANS_SLOW
			UPDATE_DELAYED_GCODE ID=BED_FAN_LOOP DURATION=1
		{% else %}
			BED_FANS_OFF
			UPDATE_DELAYED_GCODE ID=BED_FAN_LOOP DURATION=0
		{% endif %}
	{% endif %}
	
## Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off
[gcode_macro M190]
description: Override M190 (wait for bed temp)
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	{% set THRESHOLD = printer["gcode_macro _BED_FAN_VARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BED_FANS_SLOW			        
	{% else %}
		BED_FANS_OFF		           
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}					       
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BED_FANS_FAST																
	{% endif %}
	
## Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
description: Replace M140 (set bed temp) macro
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
## Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BED_FANS_OFF
	_TURN_OFF_HEATERS

## Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode BED_FAN_LOOP]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BED_FAN_VARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BED_FANS_FAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=BED_FAN_LOOP DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}

## Do not edit below this line
variable_time: -1
gcode:

[gcode_macro RESET_AIR_FILTER]
description: Resets the air-filter replacement timer
gcode:
  SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=time VALUE=0
  SAVE_VARIABLE VARIABLE=air_filter_time VALUE=0
  { action_respond_info("Air filter timer has been reset.") }

[gcode_macro QUERY_AIR_FILTER]
description: Displays the amount of time the air filter has run since it was last reset
gcode:
  {% set hours = "%.2f"|format(printer['gcode_macro _BED_FAN_VARS'].time|int / 3600) %}
  { action_respond_info("Air Filter Hours: " + hours) }

[delayed_gcode _AIR_FILTER_TIMER]
initial_duration: 1
gcode:
  {% set cached_time = printer['gcode_macro _BED_FAN_VARS'].time|int %}
    {% if cached_time == -1 %}
      {% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}
      SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=time VALUE={ cached_time }
    {% endif %}
  {% if printer[printer['gcode_macro _BED_FAN_VARS'].fan].speed|float > 0 %}
    SET_GCODE_VARIABLE MACRO=_BED_FAN_VARS VARIABLE=time VALUE={ cached_time + 1}
  {% endif %}
  {% set replacement_seconds = printer['gcode_macro _BED_FAN_VARS'].hours_until_replacement|float * 3600 %}
  {% if cached_time > replacement_seconds %}
  { printer['gcode_macro _BED_FAN_VARS'].replacement_gcode }
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1

[delayed_gcode _AIR_FILTER_FLUSH_TIMER]
initial_duration: 300
gcode:
  {% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}
  {% set actual_time = printer['gcode_macro _BED_FAN_VARS'].time|float %}
  {% if saved_time != actual_time %}
    SAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300