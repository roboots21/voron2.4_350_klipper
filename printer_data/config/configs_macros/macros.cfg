###############################################################################
# 	Macros
###############################################################################

## Set idle speed for fans/chamber led brightness
[delayed_gcode PRINTER_SET_IDLE]
initial_duration: 1.0
gcode:
    SET_FAN_SPEED FAN=controller_fan_1 SPEED=0.35
    SET_FAN_SPEED FAN=controller_fan_2 SPEED=0.35
    SET_FAN_SPEED FAN=air_filter SPEED=0.0
    SET_PIN PIN=caselight VALUE=0.25
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

## Set print speed for fans/chamber led brightness 
[gcode_macro PRINTER_SET_PRINT]
description: Set fans/caselight LEDs to print values, enable filament sensor
gcode:
    SET_FAN_SPEED FAN=controller_fan_1 SPEED=0.75
    SET_FAN_SPEED FAN=controller_fan_2 SPEED=0.75
    SET_FAN_SPEED FAN=air_filter SPEED=0.75
    SET_PIN PIN=caselight VALUE=1.0
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    
## Printer Full Home/Leveling Macro (G32)
[gcode_macro G32]
description: Perform a full home routine (home XYZ/QGL/home XYZ)
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X175 Y175 Z30 F3600

## Print Start Macro   
[gcode_macro PRINT_START]
description: Perform necessary steps prior to starting the current print job
gcode:
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("50")|int %}
    {% set filament_type = params.FILAMENT|default('PLA')|string %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    STATUS_HOMING                                            # Set LEDs to homing-mode
    G28                                                      # Full home (XYZ)
    G90                                                      # Absolute position
    BED_MESH_CLEAR                                           # Clear old saved bed mesh (if any)
    PRINTER_SET_PRINT                                        # Set fan/led/chamber LED to print settings
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=exhaust_fan TARGET={target_chamber}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"                # Display info on display
    STATUS_HEATING                                           # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                         # Go to center of the bed
    M190 S{target_bed}                                       # Set the target temp for the bed    
    {% if target_bed >= 90 %}
        M106 S255                                            # Turn on the part cooling fan
        SET_DISPLAY_TEXT MSG="Heat Soak for 5 min"           # Display info on display
        G4 P300000                                           # Wait 5 min for the bed temp to stabilize
    {% else %}
        SET_DISPLAY_TEXT MSG="Heat Soak for 1 min"           # Display info on display
        G4 P60000                                            # Wait 1 min for the bed temp to stabilize
    {% endif %}
    SET_DISPLAY_TEXT MSG="Hotend: 150C"                      # Display info on display
    M109 S150                                                # Heat hotend to 75% of target temp
    STATUS_CLEANING                                          # Set LEDs to cleaning
    CLEAN_NOZZLE                                             # Clean nozzle to get a better QGL
    SET_DISPLAY_TEXT MSG="Quad Gantry Leveling"              # Display info on display
    STATUS_LEVELING                                          # Set LEDs to leveling-mode
    QUAD_GANTRY_LEVEL                                        # Level the printer via QGL
    G28 Z                                                    # Home Z again after QGL
    SET_DISPLAY_TEXT MSG="Bed Mesh Calibrate"                # Display info on display
    STATUS_MESHING                                           # Set LEDs to bed mesh-mode
    BED_MESH_CALIBRATE ADAPTIVE=1                            # Start the bed mesh (add ADAPTIVE=1 for adaptive mesh)
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"        # Display info on display
    STATUS_HEATING                                           # Set LEDs to heating-mode
    G1 X4 Y4 Z15 F9000                                       # Go to left front of the bed
    M107                                                     # Turn off part cooling fan
    M109 S{target_extruder}                                  # Heat the hotend to set temp
    STATUS_CLEANING                                          # Set LEDs to cleaning
    CLEAN_NOZZLE                                             # Clean nozzle before prime/print
    SET_DISPLAY_TEXT MSG="Prime Time!"                       # Display info on display
    STATUS_PRINTING                                          # Set LEDs to printing-mode
    G0 X{x_wait - 50} Y4 F10000                              # Go to starting point
    G0 Z0.4                                                  # Raise Z to 0.4
    G91                                                      # Incremental positioning 
    G1 X100 E20 F1000                                        # Primeline
    G0 Y0.3 F10000                                           # Move over slightly on Y-axis
    G1 X-100 E20 F1000                                       # Backwards Primeline
    G90                                                      # Absolute position
    SET_DISPLAY_TEXT MSG="Print Time!"                       # Display info on display
   
## Print End Macro
[gcode_macro PRINT_END]
description: Perform necessary steps at print end/cancel/completion to reset printer to idle state
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    G92 E0                                                   # Zero the extruder
    G1 E-10.0 F3600                                          # Retract filament
    G91                                                      # Relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000                              # Move nozzle to remove stringing
    TURN_OFF_HEATERS                                         # Turn off the heaters
    M107                                                     # Turn off fan
    G1 Z2 F3000                                              # Move nozzle up 2mm
    G90                                                      # Absolute positioning
    G0 X175 Y350 F3600                                       # Park nozzle at rear
    BED_MESH_CLEAR                                           # Clear bed mesh
    STATUS_READY                                             # LED Status to Ready
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=exhaust_fan TARGET=40 # Cool off the chamber to 40C
    UPDATE_DELAYED_GCODE ID=PRINTER_SET_IDLE DURATION=600    # Set fans/leds/filament sensors after 10 min
    SET_DISPLAY_TEXT MSG="Print Complete .. Cool Down"       # Display info on display
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

## Print Pause Macro
[gcode_macro PAUSE]
description: Pause current print job
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   # z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              # set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    # set hotend temp variable for reference in resume macro
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  # disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          # save current print position for resume
        BASE_PAUSE                                                                           # pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       # check that zhop doesn't exceed z max
            G91                                                                              # relative positioning
            G1 Z{z} F900                                                                     # raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height") }                   # if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  # absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   # park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      # save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              # turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       # set timeout to 12 hours
    {% endif %}

## Print Resume Macro
[gcode_macro RESUME]
description: Resume current print job
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          # hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          # enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  # set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        # wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     # go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          # relative positioning
        M83                                                                          # relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                # prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     # lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          # restore position
        STATUS_PRINTING
        BASE_RESUME                                                                  # resume print
    {% endif %}

## Print Cancel Macro
[gcode_macro CANCEL_PRINT]
description: Cancel the current print job (utilize the PRINT_END macro)
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      # set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

## M600 (Filament Change) Alias
[gcode_macro M600]
gcode:
    PAUSE

## Load Filament Macro for KlipperScreen
[gcode_macro LOAD_FILAMENT]
description: Load filament into the tool head
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

## Unload Filament Macro for KlipperScreen
[gcode_macro UNLOAD_FILAMENT]
description: Unload filament from the tool head
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

## Manual Update for Klipper Backup to Git
[gcode_macro UPDATE_GIT]
description: Manual update for Klipper Backup to defined GIT location
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

## Shell Command for Klipper Backup
[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

## Shell Command for Klipper Backup
[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True

## Exclude Object Macro M485
[gcode_macro M486]
description: Exclude objects from current print job in case of object issues
gcode:
    {% if 'exclude_object' not in printer %}
        {action_raise_error("[exclude_object] is not enabled")}
    {% endif %}

    {% if 'T' in params %}
        EXCLUDE_OBJECT RESET=1
        {% for i in range(params.T | int) %}
            EXCLUDE_OBJECT_DEFINE NAME={i}
        {% endfor %}
    {% endif %}

    {% if 'C' in params %}
        EXCLUDE_OBJECT CURRENT=1
    {% endif %}

    {% if 'P' in params %}
        EXCLUDE_OBJECT NAME={params.P}
    {% endif %}

    {% if 'S' in params %}
        {% if params.S == '-1' %}
            {% if printer.exclude_object.current_object %}
                EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
            {% endif %}
        {% else %}
            EXCLUDE_OBJECT_START NAME={params.S}
        {% endif %}
    {% endif %}

    {% if 'U' in params %}
        EXCLUDE_OBJECT RESET=1 NAME={params.U}
    {% endif %}

## Clean Nozzle Macro
[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle with back/forth then diagonal sweeps over nozzle brush
variable_start_x: 315          # Starting X position - Offset a bit to the right from the brush
variable_start_y: 352          # Starting Y position - Offset a bit to the front of the brush
variable_start_z: 5.0          # Starting Z height - This should barely touch the surface of the brush
variable_x_min: 269            # Left side of the brush 
variable_x_max: 304            # Right side of the brush
variable_y_min: 354            # Front side of the brush - make sure the nozzle is over the last line of bristles 
variable_y_max: 357            # Rear side of the brush - make sure the nozzle is over the first line of bristles
variable_z1: 4.4               # Second z height of the nozzle over the brush - slightly sunk in
variable_z2: 3.8               # Third z height of the nozzle over the brush - fully sunk into brush, but not bottomed
variable_wipe_qty: 2           # How many times to run the cleaning sequence
variable_wipe_spd: 200         # Cleaning speed
variable_raise_distance: 10    # Z height after cleaning is done
gcode:
    G90               
    G1 X{start_x} Y{start_y} F9000
    G1 X{x_max} Y{y_min} F9000
    G1 Z{start_z} F1500
    # Wipe nozzle
    {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 Y{y_min} F{wipe_spd * 60}
        G1 X{x_min} F{wipe_spd * 60}
        G1 X{start_x} F{wipe_spd * 60}  
        G1 Z{z1} F1500
        G1 Y{y_min} F{wipe_spd * 60}
        G1 X{x_min} F{wipe_spd * 60}
        G1 X{start_x} F{wipe_spd * 60}
        G1 Z{z2} F1500
        G1 Y{y_min} F{wipe_spd * 60}
        G1 X{x_min} F{wipe_spd * 60}
        G1 X{start_x} F{wipe_spd * 60}
        G1 Z{start_z} F1500
    {% endfor %}
    # Wipe diagonally
    {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 Z{start_z} F1500
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}
        G1 Z{z1} F1500
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}
        G1 Z{z1} F1500
        G1 X{x_min} Y{y_max} F{wipe_spd * 60}
        G1 X{x_max} Y{y_min} F{wipe_spd * 60}
        G1 Z{z2} F1500
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}
        G1 X{start_x} Y{y_min} F{wipe_spd * 60}
        G1 Z{start_z} F1500
    {% endfor %}
    # Go back to starting position
    G1 Z{raise_distance} 
    G1 X{start_x} Y{start_y} F9000
